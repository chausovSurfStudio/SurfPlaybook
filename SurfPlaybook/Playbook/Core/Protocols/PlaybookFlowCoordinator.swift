//
//  PlaybookFlowCoordinator.swift
//  SurfPlaybook
//
//  Created by Александр Чаусов on 15.04.2021.
//  Copyright © 2021 Surf. All rights reserved.
//

import Foundation

/// В плейбуке присутствует возможность показа какого либо экрана приложения,
/// либо запуска целого flow приложения.
/// Данный протокол предназначен для объектов, способных это сделать.
///
/// По сути, объект, реализующий данный протокол, может вести в любое место разрабатываемого приложения,
/// для которого реализуется playbook. Внутри вы не ограничены в рамках выбора архитектуры.
///
/// Изначально преследовалась следующая цель - дать возможность задания точки входа
/// на любой экран разрабатываемого приложения, для которого реализуется playbook.
/// Что поможет при отладке/разработке новых экранов.
/// Также данный механизм может быть применен для реализации встроенных в playbook экранов playground-ов,
/// на которых разработчики могли бы тестировать, например, верстку новых UI-компонентов,
/// без интеграции их в разрабатываемое приложение.
public protocol PlaybookFlowCoordinator {
    /// Идентификатор абстрактного координатора,
    /// должен быть уникальным для всех подобных объектов внутри playbook-а.
    var id: String { get }
    /// Название координатора, будет отображено на UI
    var name: String { get }
    /// Тип координатора, подробнее объяснение смотреть в `FlowCoordinatorType`
    var type: FlowCoordinatorType { get }
}

/// Тип flow-координатора
///
/// Структуру flow-координаторов можно представить как дерево,
/// где узлы имеют тип `node` (с обязательным параметром в виде массива
/// вложенных в него координаторов, среди которых могут быть также и другие узлы),
/// а "листья" - тип `coordinator` (с обязательным параметром в виде замыкания,
/// вызов которого запускает flow).
/// Такой подход позволяет задать вложенную структуру на табе flow-координаторов,
/// группирую их по смыслу.
public enum FlowCoordinatorType {
    /// Тип конечного координатора, startBlock - замыкание,
    /// вызов которого должен запустить соответствующий flow
    case coordinator(startBlock: () -> Void)
    /// Тип узла для координаторов, обязательный параметр - вложенные в него координаторы
    case node(coordinators: [PlaybookFlowCoordinator])
}
